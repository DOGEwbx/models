# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import training_jobs_pb2 as training__jobs__pb2


class JobHeartbeatStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Heartbeat = channel.unary_unary(
                '/dare.JobHeartbeat/Heartbeat',
                request_serializer=training__jobs__pb2.JobHeartbeatRequest.SerializeToString,
                response_deserializer=training__jobs__pb2.HeartbeatReply.FromString,
                )
        self.JobFinish = channel.unary_unary(
                '/dare.JobHeartbeat/JobFinish',
                request_serializer=training__jobs__pb2.JobFinishRequest.SerializeToString,
                response_deserializer=training__jobs__pb2.HeartbeatReply.FromString,
                )


class JobHeartbeatServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Heartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JobFinish(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_JobHeartbeatServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Heartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.Heartbeat,
                    request_deserializer=training__jobs__pb2.JobHeartbeatRequest.FromString,
                    response_serializer=training__jobs__pb2.HeartbeatReply.SerializeToString,
            ),
            'JobFinish': grpc.unary_unary_rpc_method_handler(
                    servicer.JobFinish,
                    request_deserializer=training__jobs__pb2.JobFinishRequest.FromString,
                    response_serializer=training__jobs__pb2.HeartbeatReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dare.JobHeartbeat', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class JobHeartbeat(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Heartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dare.JobHeartbeat/Heartbeat',
            training__jobs__pb2.JobHeartbeatRequest.SerializeToString,
            training__jobs__pb2.HeartbeatReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def JobFinish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dare.JobHeartbeat/JobFinish',
            training__jobs__pb2.JobFinishRequest.SerializeToString,
            training__jobs__pb2.HeartbeatReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class JobStatusHandlerStub(object):
    """This service runs on DARE allocator and is called by training jobs
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.JobStart = channel.unary_unary(
                '/dare.JobStatusHandler/JobStart',
                request_serializer=training__jobs__pb2.JobStartRequest.SerializeToString,
                response_deserializer=training__jobs__pb2.JobStatusReply.FromString,
                )
        self.NewEpoch = channel.unary_unary(
                '/dare.JobStatusHandler/NewEpoch',
                request_serializer=training__jobs__pb2.NewEpochRequest.SerializeToString,
                response_deserializer=training__jobs__pb2.JobStatusReply.FromString,
                )


class JobStatusHandlerServicer(object):
    """This service runs on DARE allocator and is called by training jobs
    """

    def JobStart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NewEpoch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_JobStatusHandlerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'JobStart': grpc.unary_unary_rpc_method_handler(
                    servicer.JobStart,
                    request_deserializer=training__jobs__pb2.JobStartRequest.FromString,
                    response_serializer=training__jobs__pb2.JobStatusReply.SerializeToString,
            ),
            'NewEpoch': grpc.unary_unary_rpc_method_handler(
                    servicer.NewEpoch,
                    request_deserializer=training__jobs__pb2.NewEpochRequest.FromString,
                    response_serializer=training__jobs__pb2.JobStatusReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dare.JobStatusHandler', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class JobStatusHandler(object):
    """This service runs on DARE allocator and is called by training jobs
    """

    @staticmethod
    def JobStart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dare.JobStatusHandler/JobStart',
            training__jobs__pb2.JobStartRequest.SerializeToString,
            training__jobs__pb2.JobStatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NewEpoch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dare.JobStatusHandler/NewEpoch',
            training__jobs__pb2.NewEpochRequest.SerializeToString,
            training__jobs__pb2.JobStatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
